#Access internal storage
termux-setup-storage

#Upgrade packages
apt update && apt upgrade
apt install build-essential

#Mandatory packages
apt install git silversearcher-ag wget openssh subversion imagemagick proot nano python bsdtar mutt nmap


#Python installation
pip install --upgrade pip
#Add pointless repo
wget https://its-pointless.github.io/setup-pointless-repo.sh
bash setup-pointless-repo.sh

#Install scipy, numpy is also installed with this
apt install gcc-8 scipy numpy
#other python packages
pip install wheel  matplotlib mpmath sympy  
pip install cvxopt cvxpy
#if cvxopt fails, then
pip install -Iv cvxopt==1.1.8
#if cvxpy fails
git clone https://github.com/cvxgrp/cvxpy.git
cd cvxpy
python setup.py install
#or
pip install -Iv cvxpy==1.1.0
#Install Jupyter notebook
apt install clang python fftw libzmq freetype libpng pkg-config libcrypt
LDFLAGS="-lm -lcompiler_rt" pip install jupyter
jupyter notebook

#When you run jupyter notebook, a notebook server starts up and dumps some information to stdout. When you see the line:
#Copy/paste this URL into your browser when you connect for the first time,
#to login with a token:
#copy the following URL, paste it into the browser on your device, and then hit go. 

#End Python Installation

#Latex
apt install texlive-full ghostscript texinfo
apt-mark hold ghostscript
#as ghostscript sometimes breaks with updates
wget https://raw.githubusercontent.com/gadepall/resources/master/termux/tex2pdf.sh
chmod +x tex2pdf.sh
mv tex2pdf.sh $PREFIX/bin/
#Execute filename.tex as
tex2pdf filename

#Begin Latex and Python Testing
#Download Test Directory for LaTeX and Python
svn co https://github.com/gadepall/school/trunk/training

#Testing python installation
python training/math/codes/tri_sss.py
#and the following file for sympy
python training/chemistry/codes/chembal.py

#Testing Latex Installation
#For latex document, open 
tex2pdf.sh training/chemistry/gvv_eq_balance
#For latex slides
tex2pdf.sh training/presentation/example
#For latex figures, open 
tex2pdf.sh training/math/figs/tri_sss_alone
#and execute
#For including figures in a latex document, open
tex2pdf.sh training/math/gvv_math_eg
#and execute
#End Latex and Python Testing

#You may skip to the archlinux section now and do the following later if
#interested
#AVR Tools

#Installing avra
https://sourceforge.net/projects/avra/files/1.3.0/avra-1.3.0.tar.bz2/download
or
cd ~
wget https://excellmedia.dl.sourceforge.net/project/avra/1.3.0/avra-1.3.0.tar.bz2
cp avra-1.3.0.tar.bz2 ~/
tar xf avra-1.3.0.tar.bz2
cd avra-1.3.0
cp README AUTHORS ./src
cd src
#Create empty files with names NEWS, ChangeLog
nano NEWS
nano ChangeLog
#Create avra binary
chmod +x bootstrap
chmod +x configure
mv configure.in configure.ac
./bootstrap
termux-fix-shebang configure
./configure --prefix=$PREFIX
make -j 4
cp avra $PREFIX/bin
cd ~
wget https://github.com/gadepall/resources/raw/master/termux/avr/m328Pdef/m328Pdef.inc
wget https://github.com/gadepall/resources/raw/master/termux/avr/asm_codes/hello.asm
avra hello.asm
#You should see hello.hex generated
#Now any .asm file can be executed using 
avra filename.asm
#End installing avra


#Install avrdude

#Install readline 
apt install readline
#In case above doesn't work, install from source using the following
#wget http://ftp.vim.org/ftp/gnu/readline/readline-8.0-beta.tar.gz

#Install libusb-1
wget https://github.com/libusb/libusb/releases/download/v1.0.21/libusb-1.0.21.tar.bz2
tar xf libusb-1.0.21.tar.bz2
cd libusb-1.0.21
termux-fix-shebang configure
./configure --prefix=$PREFIX --disable-udev
make -j 4
make install  

#Install avrdude
cd ..
wget http://download.savannah.gnu.org/releases/avrdude/avrdude-6.3.tar.gz
tar -xf avrdude-6.3.tar.gz
cd avrdude-6.3
rm config.guess config.sub
wget -O config.guess 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD'
wget -O config.sub 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD'
chmod +x configure
termux-fix-shebang configure
./configure --prefix=$PREFIX
make -j 4
make install 

#logon to the pi
sudo apt install ser2net

#Open a terminal
ssh -tt -n -L 8086:localhost:8086 pi@10.0.0.8 '/usr/sbin/ser2net -d -C "8086:raw:600:/dev/ttyACM0:115200 NONE 1STOPBIT 8DATABITS -XONXOFF LOCAL -RTSCTS HANGUP_WHEN_DONE "' 

#Open another terminal
avra hello.asm
avrdude -p atmega328p -c arduino -P net:localhost:8086 -U flash:w:hello.hex
#If there is any issue, use above ssh as root user




#Installing archlinux on termux, aka termuxarch
apt update
wget https://raw.githubusercontent.com/sdrausty/TermuxArch/master/setupTermuxArch.sh
bash setupTermuxArch.sh
locale-gen

#Starting archlinux on termux
cd ~
startarch
or
bash arch/startarch 

pacman -Sy base-devel git svn wget go cmake
#Exit 
#Create user on termuxarch
startarch
addauser user
#if the above command doesn't work
startarch c addauser user
#If the above doesn't work
startach
useradd -m  username
exit
#To login as user
startarch l username

#Exit
#Login as user
bash arch/startarch ul user
#or
startarch l user
#End archlinux install


#Installing nosudo on termuxarch
#login as root
pacman -Rdd sudo
#Download
https://github.com/gadepall/resources/blob/master/termux/termuxarch/nosudo-0.9-1-any.pkg.tar.xz
pacman -U nosudo-0.9-1-any.pkg.tar.xz

#This will give superuser permissions to user, default password is root


#install yay on termuxarch
#login as root and download
https://github.com/gadepall/resources/blob/master/termux/termuxarch/yay-git-9.4.4.r0.g3a5a6a7-1-aarch64.pkg.tar.xz
pacman -U yay-git-9.4.4.r0.g3a5a6a7-1-aarch64.pkg.tar.xz

#Install fakeroot on termuxarch.  This allows installation using makepkg 
#logged in as user
startarch l user
cd /data/data/com.termux/files/home
https://mirrors.ocf.berkeley.edu/ubuntu/pool/main/f/fakeroot/fakeroot_1.24.orig.tar.gz
#https://www.reddit.com/r/archlinux/comments/dv9k8t/cannot_build_with_fakeroot_looking_for/
#wget http://ftp.debian.org/debian/pool/main/f/fakeroot/fakeroot_1.24.orig.tar.gz
tar xf fakeroot_1.24.orig.tar.gz
cd fakeroot_1.24/
#if the above link doesnot work, download fakeroot from the debain repository online and repeat the above steps

./bootstrap
./configure --prefix=/opt/fakeroot  --libdir=/opt/fakeroot/libs  --disable-static  --with-ipc=tcp

make -j4

#login as root and execute without sudo
sudo make install

/opt/fakeroot/bin/fakeroot

exit

#Login as root
pacman -R fakeroot

cd /bin

ln -s /opt/fakeroot/bin/fakeroot

fakeroot
#End fakeroot install on termuxarch

#Ignore packages
nano /etc/pacman.conf
#search for the line and change to
Ignorepkg = sudo fakeroot
#This will ensure that nosudo and the new fakeroot are not overwritten
#Save and exit


#Install AVR tools
#Installing avra
yay --editmenu -S avra
#wait for various prompts, choose avra-git, edit the PKGBUILD using nano and add 'aarch64' in the build architecture

#Install avr-gcc on termuxarch
startarch
pacman -Sy avrdude avr-gcc avr-libc 
#End avr-gcc installation termuxarch


#Arduino IDE
#Install platformio on termuxarch
pacman -S python python-pip
pip install platformio
#Follow instructions on platformio website for installing avr toolchain

#cd to the src directory
#modify main.cpp for the code
#go outside the source director
pio run -e uno
cd /data/data/com.termux/files/home/storage/shared/tlc/resources/termux/avr/pio_codes/.pioenvs/uno
#where pio_codes is the main directory
#Flash the firmware.hex file using avrdude

#End platformio installation on termuxarch


#Install python on termuxarch
#As termuxarch user
sudo pacman -S python-pip
sudo pacman -S  python-numpy python-scipy python-matplotlib python-sympy python-mpmath python-cvxopt
yay -S --editmenu python-cvxpy
#End Install python on termuxarch.  


#ARM-GCC
#Download precompiled arm binaries for aarch64 from
https://drive.google.com/a/iith.ac.in/file/d/1Kts3x8iS4kwGuLE8K_tNZv8bCWIQaQNs/view?usp=drivesdk
cp gcc-arm-none-eabi-8-2019-q3-update-linux.tar.bz2 ~/
cd ~
tar xf gcc-arm-none-eabi-8-2019-q3-update-linux.tar.bz2
#Download example directory for building arm binaries
git clone https://github.com/gadepall/STM32F103C8T6.git
startarch l user
cd STM32F103C8T6
make clean
make bin
#This should generate the bin file for the blink
#transfer the bin file to the rpi and 
#Follow the instructions in
https://github.com/gadepall/arm-embedded/blob/master/setup/gvv_stm32_tinker_setup.pdf
#to flash the bin file to the stm32 from the rpi using the telnet terminal


#Icoboard toolchain on termuxarch
#Prerequisites
pacman -S  clang bison flex git svn make \
gawk tcl libffi mercurial graphviz \
xdot pkg-config python libftdi libftdi-compat

#Icestorm
#On termuxarch run as normal user without sudo
git clone https://github.com/cliffordwolf/icestorm
cd icestorm && make -j4 && make install

#arachne-pnr
#On termuxarch run as normal user without sudo
git clone https://github.com/cseed/arachne-pnr
cd arachne-pnr && make -j4 && sudo make install

#Yosys
#On termuxarch run as normal user without sudo
git clone https://github.com/cliffordwolf/yosys
cd yosys && make -j4 && sudo make install


#Source installation

#WiringPi
#On termuxarch run as root user
git clone https://github.com/WiringPi/WiringPi.git
cd WiringPi && ./build


#Icoprog
#On termuxarch run as root user
#With termuxarch and pizero, this is the only tool required at the pi
svn co http://svn.clifford.at/handicraft/2015/icoprog
cd icoprog && make install

#Icestorm
#On termuxarch run as normal user without sudo
git clone https://github.com/cliffordwolf/icestorm
cd icestorm && make -j4 && make install

#arachne-pnr
#On termuxarch run as normal user without sudo
git clone https://github.com/cseed/arachne-pnr
cd arachne-pnr && make -j4 && make install

#Yosys
#On termuxarch run as normal user without sudo
git clone https://github.com/cliffordwolf/yosys
cd yosys && make -j4 && sudo make install
#End Icoboard toolchain on termuxarch






#ARM toolchain on termuxarch
yay -S --editmenu arm-none-eabi-gcc

#Icoboard toolchain on termuxarch
yay -S --editmenu icestorm-git
yay -S --editmenu arachne-pnr-git 
yay -S --editmenu yosys-git 
#edit the pkgbuild to include ('x86_64' 'aarch64') as the build architecture.  
#currently this is not working, most likely due to an issue with gcc or poor ram management

#To build nosudo from source



#login as user
git clone https://aur.archlinux.org/nosudo.git
cd nosudo
makepkg -si
#This will create nosudo package but prompt for password.  break out and type
cp nosudo-0.9-1-any.pkg.tar.xz /data/data/com.termux/files/home/
#login as root
pacman -U  nosudo-0.9-1-any.pkg.tar.xz
#End installing nosudo on termuxarch



#To build yay from source
#login into user
git clone https://aur.archlinux.org/yay-git.git
cd yay-git
makepkg -si
#This will build a pkg.tar.xz file and will ask for root permission.  If root doesn't work,
cp yay-git***.pkg.tar.gz /data/data/com.termux/files/home/
#Login as root
pacman -U yay-git***.pkg.tar.gz
#end install yay



#Batch convert files
mogrify -format eps *.jpg
#Mount locations for external storage
https://android.stackexchange.com/questions/5232/how-can-i-view-the-android-internal-partition-table
#Reinstall pip if there is a conflict between pip2 and pip3
python -m pip install -U --force-reinstall pip

#Install python sound support
pkg install libffi-dev libsndfile
pip install pysoundfile


#Steps for installing packages from source
termux-fix-shebang configure
./configure --prefix=$PREFIX 
make -j 4
make install  

ssconvert --export-type=Gnumeric_html:latex projects.xlsx projects.tex
http://hplgit.github.io/web4sciapps/doc/pub/._web4sa_flask004.html
ssconvert --export-type=Gnumeric_html:html40 filename.xls filename.html



#Latex alternative install, use only if you know what it means
apt install texlive
tlmgr update --list
tlmgr install scheme-full

#The following two commands are optional, use only if you know what it means
# Make gcc default
setupgcc-8
#If you want clang instead of gcc
setupclang


#VNC
apt install x11-repo tigervnc fluxbox openbox pypanel xorg-xsetroot
nano ~/.vnc/xstartup
#and copy the following
# Generate menu.
fluxbox-generate_menu
# Start fluxbox.
fluxbox &
# Start Openbox.
openbox-session &
#save and exit
nano ${PREFIX}/etc/xdg/openbox/autostart
# Make background gray.
xsetroot -solid gray
# Launch PyPanel.
pypanel &
#save and exit
nano ${PREFIX}/etc/bash.bashrc
export DISPLAY=":1"

#Configure mutt
apt install mutt
http://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu/

#Add addressbook in mutt using goobook

https://hynek.me/articles/my-mutt-gmail-setup/
https://gitlab.com/goobook/goobook/-/issues/83




